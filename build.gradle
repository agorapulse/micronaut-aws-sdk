/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2018-2022 Agorapulse.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.checkstyle'
    id 'org.kordamp.gradle.codenarc'
    id 'org.kordamp.gradle.coveralls'
    id 'io.github.gradle-nexus.publish-plugin'
}

logger.lifecycle "Using Micronaut $micronautVersion"

if (!project.hasProperty('ossrhUsername'))      ext.ossrhUsername       = System.getenv('SONATYPE_USERNAME') ?: '**UNDEFINED**'
if (!project.hasProperty('ossrhPassword'))      ext.ossrhPassword       = System.getenv('SONATYPE_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingKeyId'))       ext.signingKeyId        = System.getenv('SIGNING_KEY_ID') ?: '**UNDEFINED**'
if (!project.hasProperty('signingPassword'))    ext.signingPassword     = System.getenv('SIGNING_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingSecretKey'))   ext.signingSecretKey    = System.getenv('SIGNING_SECRET_KEY_PATH') ? rootProject.file(System.getenv('SIGNING_SECRET_KEY_PATH')).text : '**UNDEFINED**'


config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name        = 'Micronaut Libraries'
        vendor      = 'Agorapulse'
        description = 'Set of useful libraries for Micronaut'

        links {
            website      = "https://github.com/${slug}"
            issueTracker = "https://github.com/${slug}/issues"
            scm          = "https://github.com/${slug}.git"
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                name = 'localRelease'
                url  = "${project.rootProject.buildDir}/repos/local/release"
            }
            repository {
                name = 'localSnapshot'
                url  = "${project.rootProject.buildDir}/repos/local/snapshot"
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    publishing {
        signing {
            enabled =  true
            keyId = signingKeyId
            secretKey = signingSecretKey
            password = signingPassword
        }
        releasesRepository  = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }

    quality {
        checkstyle {
            toolVersion = '8.27'
        }

        codenarc {
            toolVersion = '1.5'
        }
    }

    docs {
        groovydoc {
            enabled = false
            aggregate {
                enabled = false
            }
        }
    }

}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
            snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

allprojects {
    apply from: rootProject.file('gradle/micronaut-compatibility.gradle')
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/release"  }
    }

    license {
        exclude '**/*.json'
        exclude '***.yml'
        exclude 'logback.xml'
    }
}

subprojects { Project subproject ->
    if (subproject.name == 'guide' || subproject.name == 'micronaut-aws-sdk-dependencies') return

    apply plugin: 'groovy'
    apply plugin: 'micronaut-compatibility'

    dependencies {
        annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        compile platform(project(':micronaut-aws-sdk-dependencies'))

        annotationProcessor "io.micronaut:micronaut-inject-java"

        // Groovy
        if (subproject.name.startsWith('micronaut-amazon-awssdk')) {
            compileOnly "org.codehaus.groovy:groovy:$groovyVersion"
            testCompile "org.codehaus.groovy:groovy:$groovyVersion"
        } else {
            compile "org.codehaus.groovy:groovy:$groovyVersion"
            compile micronautMigratedDependency('micronaut-runtime-groovy')
            compileOnly 'io.micronaut:micronaut-inject-groovy'
        }

        compile "io.micronaut:micronaut-inject"
        compile "io.micronaut:micronaut-runtime"

        // Micronaut 3.x Compatibilty
        implementation 'io.reactivex.rxjava2:rxjava:2.2.10'


        compileOnly "io.micronaut:micronaut-inject-java"

        runtime "ch.qos.logback:logback-classic:1.2.3"

        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"

        testCompile platform("io.micronaut:micronaut-bom:$micronautVersion")
        testCompile "io.micronaut:micronaut-inject-groovy"

        testCompile 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

        testCompile("org.spockframework:spock-core:$spockVersion") {
            exclude group: "org.codehaus.groovy", module: "groovy-all"
        }
        testCompile 'cglib:cglib-nodep:3.2.0'
        testCompile 'org.objenesis:objenesis:1.2'

        testCompileOnly 'com.agorapulse:remember:0.4.2'
    }

    compileJava.options.compilerArgs += '-parameters'
    compileTestJava.options.compilerArgs += '-parameters'

    test {
        useJUnitPlatform()
        environment 'AWS_CBOR_DISABLE', 'true'
        systemProperty 'TEST_RESOURCES_FOLDER', new File(subproject.projectDir, 'src/test/resources').canonicalPath
        systemProperty 'user.timezone', 'UTC'
        systemProperty 'user.language', 'en'
    }

    task cleanOut(type: Delete) {
        delete file('out')
    }

    clean.dependsOn cleanOut

}

check.dependsOn('aggregateCheckstyle', 'aggregateCodenarc', 'aggregateAllTestReports', 'coveralls')
