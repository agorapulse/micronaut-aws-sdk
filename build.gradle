/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2019 Vladimir Orany.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.bintray'
    id 'com.github.kt3k.coveralls'
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = '**UNDEFINED**'
if (!project.hasProperty('bintrayApiKey'))   ext.bintrayApiKey   = '**UNDEFINED**'

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name        = 'Micronaut Libraries'
        vendor      = 'Agorapulse'
        description = 'Set of useful libraries for Micronaut'

        links {
            website      = "https://github.com/${slug}"
            issueTracker = "https://github.com/${slug}/issues"
            scm          = "https://github.com/${slug}.git"
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                name = 'localRelease'
                url  = "${project.rootProject.buildDir}/repos/local/release"
            }
            repository {
                name = 'localSnapshot'
                url  = "${project.rootProject.buildDir}/repos/local/snapshot"
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    publishing {
        signing             = false
        releasesRepository  = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }

    bintray {
        credentials {
            username = bintrayUsername
            password = bintrayApiKey
        }
        userOrg    = 'agorapulse'
        repo       = 'libs'
        name       = rootProject.name
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url  "https://dl.bintray.com/agorapulse/libs" }
        maven { url "https://repo.spring.io/release"  }
    }

    license {
        exclude '**/*.json'
        exclude '***.yml'
    }
}

subprojects { Project subproject ->
    if (subproject.name == 'guide') return

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'

    configurations {
        optional.extendsFrom compile

        compileOnly.extendsFrom optional
        testCompile.extendsFrom optional
    }

    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
        }

        dependencies {
            dependencySet(group: 'com.amazonaws', version: project.awsSdkVersion) {
                entry 'aws-java-sdk-core'
                entry 'aws-java-sdk-dynamodb'
                entry 'aws-java-sdk-kms'
                entry 'aws-java-sdk-kinesis'
                entry 'aws-java-sdk-s3'
                entry 'aws-java-sdk-ses'
                entry 'aws-java-sdk-sns'
                entry 'aws-java-sdk-sqs'
                entry 'aws-java-sdk-sts'
                entry 'jmespath'
            }

            dependencySet(group: 'software.amazon.sdk', version: project.awsSdk2Version) {
                entry 'core'
                entry 'dynamodb'
                entry 'kms'
                entry 'kinesis'
                entry 's3'
                entry 'ses'
                entry 'sns'
                entry 'sqs'
                entry 'sts'
            }

            dependency group: 'com.amazonaws', name: 'amazon-dax-client', version: '1.0.202017.0'
            dependency group: 'com.amazonaws', name: 'amazon-kinesis-client', version: '1.9.3'
            dependency group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '2.2.5'
            dependency group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: project['jackson.datatype.version']
        }
    }

    dependencies {
        annotationProcessor "io.micronaut:micronaut-inject-java"

        // Groovy
        compile "org.codehaus.groovy:groovy:$groovyVersion"

        compile "io.micronaut:micronaut-runtime-groovy"
        compile "io.micronaut:micronaut-inject"
        compile "io.micronaut:micronaut-runtime"

        compileOnly "io.micronaut:micronaut-inject-groovy"
        compileOnly "io.micronaut:micronaut-inject-java"


        runtime "ch.qos.logback:logback-classic:1.2.3"

        testAnnotationProcessor "io.micronaut:micronaut-inject-java"

        testCompile "io.micronaut:micronaut-inject-groovy"

        testCompile("org.spockframework:spock-core:$spockVersion") {
            exclude group: "org.codehaus.groovy", module: "groovy-all"
        }
        testCompile 'cglib:cglib-nodep:3.2.0'
        testCompile 'org.objenesis:objenesis:1.2'

        testCompileOnly 'com.agorapulse:remember:0.1'
    }

    compileJava.options.compilerArgs += '-parameters'
    compileTestJava.options.compilerArgs += '-parameters'

    test {
        environment 'AWS_CBOR_DISABLE', 'true'
        systemProperty 'TEST_RESOURCES_FOLDER', new File(subproject.projectDir, 'src/test/resources').canonicalPath
        systemProperty 'user.timezone', 'UTC'
        systemProperty 'user.language', 'en'
    }

    task cleanOut(type: Delete) {
        delete file('out')
    }

    clean.dependsOn cleanOut

    checkstyle {
        toolVersion = '8.27'
    }

    codenarc {
        toolVersion = '1.2.1'
    }

    bintray {
        publish = true
    }
}


gradle.taskGraph.whenReady {
    coveralls {
        sourceDirs = subprojects.findAll { it.plugins.hasPlugin('java') } sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/root/jacocoTestReport.xml"
    }
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.CI || System.env.GITHUB_ACTIONS }
}
